@page "/participante-crear"
@using SNashENGINE.Share
@using SNashENGINE.Share.Componentes
@using SNashENGINE.Share.DTOs
@using SNashENGINE.Share.DTOs.Equipo
@using SNashENGINE.Share.DTOs.Participantes
@using SNashENGINE.Share.Datos

@rendermode InteractiveAuto

<h3>Crear Participante</h3>

@if (IsLoading)
{
    <Cargador />
}else
{
    if (ParticipanteDTO is not null)
    {
        <EditForm EditContext="EditarContexto" FormName="registoParticipante" method="post" OnValidSubmit="AlSometerForm">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="ParticipanteDTO.Nombre" id="nombre" class="form-control" placeholder="Nombre" />
                <label for="nombre">Nombre</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ParticipanteDTO.Apellidos" id="apellidos" class="form-control" placeholder="Apellido" />
                <label for="apellidos">Apellido:</label>
            </div>

            <div class="form-floating mb-3">
                <InputDate @bind-Value="ParticipanteDTO.FechaNac" id="fechaNacimiento" class="form-control" placeholder="Fecha de Nacimiento" />
                <label for="fechaNacimiento">Fecha de Nacimiento:</label>
            </div>

            <InputRadioGroup Name="Sexo" @bind-Value="ParticipanteDTO.Sexo">
                <label for="sexo">Sexo:</label>
                <div class="form-check">
                    <InputRadio Name="Sexo" class="form-check-input" Value="eSexo.Masculino" id="masculino" />
                    <label class="form-check-label" for="masculino">
                        Masculino
                    </label>
                </div>
                <div class="form-check">
                    <InputRadio Name="Sexo" class="form-check-input" Value="eSexo.Femenino" id="femenino" />
                    <label class="form-check-label" for="femenino">
                        Femenino
                    </label>
                </div>
            </InputRadioGroup>

            <div class="form-floating m-3">
                <RadzenDropDownDataGrid @bind-Value=@ParticipanteDTO.EquipoId Data=@EquiposDto
                                        TextProperty="Nombre" id="equipoSelect" ValueProperty="Id" class="form-select"
                                        AllowColumnResize="true" AllowFilteringByAllStringColumns="true">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Nombre" Title="Equipo" />
                        <RadzenDropDownDataGridColumn Property="Iglesia" Title="Iglesia" />
                        <RadzenDropDownDataGridColumn Property="Zona" Title="Zonas" />
                    </Columns>
                </RadzenDropDownDataGrid>
                <label for="equipoSelect">Selecciona un equipo</label>
            </div>

            <RadzenCard>
                <h3>Usuario</h3>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="UserInfo.Email" id="username" class="form-control" placeholder="Nombre Usuario" />
                    <label for="username">Nombre Usuario</label>
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="UserInfo.Pass" type="password" id="pass" class="form-control" placeholder="Contraseña" />
                    <label for="pass">Contraseña</label>
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="UserInfo.PassRetype" type="password" id="pass-retype" class="form-control" placeholder="Reescribir Contraseña" />
                    <label for="pass-retype">Reescribir Contraseña</label>
                </div>

            </RadzenCard>

            <button type="submit" class="btn btn-info">Enviar</button>
            <button type="reset" class="btn btn-warning">Limpiar</button>
        </EditForm>
    }      
}


@inject HttpClient HtpC
@inject NavigationManager Navi

@code {
    [SupplyParameterFromForm]
    ParticipanteInsertarDTO? ParticipanteDTO { get; set; } = new ParticipanteInsertarDTO();
    UserInfoDTO UserInfo = new UserInfoDTO();

    EditContext? EditarContexto;
    EquipoDTO[]? EquiposDto;

    bool IsLoading = false;


    protected override async Task OnInitializedAsync()
    {
        if (ParticipanteDTO is not null)
        {
            EditarContexto = new(ParticipanteDTO);
        }

        if (HtpC.BaseAddress is null)
        {
            HtpC.BaseAddress = new Uri(Navi.BaseUri);
        }

        //Creacion de Usuario



        RequestData<EquipoDTO[]>? EquiposRequest = await HtpC.GetFromJsonAsync<RequestData<EquipoDTO[]>>("api/equipos");
        if (EquiposRequest is not null && EquiposRequest.IsSuccess)
        {
            EquiposDto = EquiposRequest.Data;
        }else
        {
            EquiposDto ??= Enumerable.Empty<EquipoDTO>().ToArray();
        }


        await base.OnInitializedAsync();
    }


    async Task AlSometerForm()
    {
        IsLoading = true;

        HttpResponseMessage ResultadoPost = await HtpC.PostAsJsonAsync("api/participantes", ParticipanteDTO);
        if (ResultadoPost.IsSuccessStatusCode)
        {
            IsLoading = false;
            var resultado = ResultadoPost.Content.ReadFromJsonAsync<RequestData<ParticipanteDTO>>();
            

            ParticipanteDTO = null;
            ParticipanteDTO = new();
        }
    }
}
