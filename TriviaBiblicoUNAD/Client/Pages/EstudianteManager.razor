@page "/estudiantes"
@using TriviaBiblicoUNAD.Client.Pages.Comp
@using TriviaBiblicoUNAD.Shared.DTOs.Estudiante;
@using static TriviaBiblicoUNAD.Client.Pages.Comp.ListaGrupo;

@inject HttpClient ClienteHttp;
@inject IJSRuntime JsR;

<PageTitle>Manejador de Estudiantes</PageTitle>
<h3>Manejador de Estudiantes</h3>


<a href="crear-estudiante" class="btn btn-outline-primary">Crear</a>
<a href="estudiante-detalle/25">Detalles</a>

<MiTabla TipoDato="EstudianteDTO" Colecccion="Estudiantes">
    <Cabeza>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Matricula</th>
            <th scope="col">Estudiante</th>
            <th scope="col">Nacimiento</th>
            <th scope="col">Carrera</th>
            <th scope="col">Opciones</th>
        </tr>
    </Cabeza>
    <Pie>
        <tr>
            <td colspan="7">

                @if (Estudiantes is not null)
                {
                    <span>@Estudiantes.Length | Registros</span>
                }

            </td>
        </tr>
    </Pie>
    <Cuerpo Context="estEnFila" >
        <tr>
            <th scope="row">@estEnFila.Id</th>
            <td>@estEnFila.Matricula</td>
            <td>@estEnFila.GetNombreCompleto</td>
            <td>@estEnFila.FechNac (@estEnFila.Edad)</td>
            <td>@estEnFila.Carrera</td>
            <td>
                <a href="estudiante-detalle/@estEnFila.Id" class="btn btn-sm btn-outline-info">Detalles</a>
                <a href="estudiante/@estEnFila.Id/editar" class="btn btn-sm btn-outline-success">Editar</a>
                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(async () => await AlEliminar(estEnFila.Id, estEnFila.GetNombreCompleto) )">Eliminar</button>
            </td>
        </tr>
    </Cuerpo>
</MiTabla>


@code {
    int costo = 24;


    EstudianteDTO[]? Estudiantes;

    protected override async Task OnInitializedAsync()
    {
        await TraerEstudiantesDesdelaBD();

        await base.OnInitializedAsync();
    }

    async Task TraerEstudiantesDesdelaBD()
    {
        Estudiantes = await ClienteHttp.GetFromJsonAsync<EstudianteDTO[]>("api/estudiantes");
    }


    async Task AlEliminar(int Id, string? nombre)
    {
        var resultadoConfirmacion = await JsR.InvokeAsync<bool>("confirm", $"Estas seguro de eliminar el estudiante: {nombre} ?");
        if (resultadoConfirmacion)
        {
            var result = await ClienteHttp.DeleteFromJsonAsync<int>($"api/estudiantes/{Id}/sotfdelete");
            if (result > 0)
            {
                await JsR.InvokeVoidAsync("alert", $"Registro: {nombre} Eliminado Satisfactoriamente...");
                await TraerEstudiantesDesdelaBD();
            }
            else
            {
                await JsR.InvokeVoidAsync("alert", $"Error al intentar eliminar el registro: {nombre}");
            }       
        }  

        await Task.FromResult(0);
    }

}
